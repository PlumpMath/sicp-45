(define (triples s t u)
    (cons-stream (list (stream-car s)
                       (stream-car t)
                       (stream-car u))
                 (interleave (stream-map (lambda (t-u-pair)
                                            (list (stream-car s) 
                                                  (car t-u-pair) 
                                                  (cadr t-u-pair)))
                                         (stream-cdr (pairs t u)))
                             (triples (stream-cdr s)
                                      (stream-cdr t)
                                      (stream-cdr u)))))

(define int-triples (triples integers integers integers))

(display-n-stream int-triples 20)
;Result
;(1 1 1)
;(1 1 2)
;(2 2 2)
;(1 2 2)
;(2 2 3)
;(1 1 3)
;(3 3 3)
;(1 2 3)
;(2 3 3)
;(1 1 4)
;(3 3 4)
;(1 3 3)
;(2 2 4)
;(1 1 5)
;(4 4 4)
;(1 2 4)
;(2 3 4)
;(1 1 6)
;(3 4 4)
;(1 3 4)

(define pythagorean-triples
    (stream-filter (lambda (triples)
                        (= (+ (square (car triples))
                              (square (cadr triples)))
                           (square (caddr triples))))
                   int-triples))


(display-n-stream pythagorean-triples 5)
;Result
;(3 4 5)
;(6 8 10)
;(5 12 13)
;(9 12 15)
;(8 15 17)

