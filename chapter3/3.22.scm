(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty?) (null? front-ptr))

    (define (front)
        (if (empty?)
            (error "FRONT called with an empty queue")
            (car front-ptr)))
    (define (insert! item)
        (let ((new-item (cons item '())))
            (cond ((empty?)
                    (set-front-ptr! new-item)
                    (set-rear-ptr! new-item)
                    dispatch)
                  (else 
                    (set-cdr! rear-ptr new-item)
                    (set-rear-ptr! new-item)
                    dispatch))))
    (define (delete!)
        (if (empty?)
            (error "DELETE called with an empty queue")
            (begin (set-front-ptr! (cdr front-ptr)) dispatch)))
    (define (print)
        (display front-ptr))
    (define (dispatch m) 
        (cond ((eq? m 'front) front)
              ((eq? m 'insert!) insert!)
              ((eq? m 'delete!) delete!)
              ((eq? m 'print) print)
              (else (error "Undefined Operation -- MAKE-QUEUE" m))))
    dispatch))

(define (front-queue q)
    ((q 'front)))

(define (insert-queue! q item)
    ((q 'insert!) item))

(define (delete-queue! q)
    ((q 'delete!)))

(define (print-queue q)
    ((q 'print)))
