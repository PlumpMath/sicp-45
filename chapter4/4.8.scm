(define (make-define var exp) (list 'define var exp))

(define (named-let? exp) (symbol? (name exp)))
(define (named-let-name exp) (cadr exp))
(define (named-let-vars exp) (map car (caddr exp)))
(define (named-let-exps exp) (map cadr (caddr exp)))
(define (named-let-body exp) (cdddr exp))

(define (let->combination exp)
    (if (named-let? exp)
        (sequence->exp (list (make-define (named-let-name exp)
                                          (make-lambda (named-let-vars exp)
                                                       (named-let-body exp)))
                             (cons (named-let-name exp) (named-let-exps exp))))
        (cons (make-lambda (let-vars exp) 
                           (let-body exp))
              (let-exps exp))))
